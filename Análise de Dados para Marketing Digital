## Estrutura do Projeto
# ðŸ“‚ marketing-data-analysis
# â”œâ”€â”€ ðŸ“‚ data  # Dados brutos e processados
# â”œâ”€â”€ ðŸ“‚ notebooks  # Jupyter Notebooks para anÃ¡lise
# â”œâ”€â”€ ðŸ“‚ scripts  # Scripts Python para ETL e automaÃ§Ã£o
# â”œâ”€â”€ ðŸ“‚ dashboards  # Arquivos para Looker Studio ou Power BI
# â”œâ”€â”€ README.md  # DocumentaÃ§Ã£o do projeto

# ImportaÃ§Ã£o das bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.cloud import bigquery

# ConfiguraÃ§Ã£o inicial
sns.set_style("whitegrid")

# FunÃ§Ã£o para carregar dados de BigQuery
def carregar_dados(query, project_id):
    client = bigquery.Client(project=project_id)
    df = client.query(query).to_dataframe()
    return df

# Exemplo de consulta SQL no BigQuery
QUERY = """
SELECT campaign, medium, source, sessions, conversions
FROM `projeto-marketing.analytics_data`
LIMIT 1000
"""

# Substituir pelo ID do seu projeto no GCP
PROJETO_ID = "seu-projeto-id"
df = carregar_dados(QUERY, PROJETO_ID)

# VisualizaÃ§Ã£o inicial dos dados
df.head()

# EstatÃ­sticas bÃ¡sicas
df.describe()

# GrÃ¡fico de conversÃµes por campanha
plt.figure(figsize=(12,6))
sns.barplot(x='campaign', y='conversions', data=df, palette='viridis')
plt.xticks(rotation=45)
plt.title('ConversÃµes por Campanha')
plt.show()

# Salvando relatÃ³rio CSV
df.to_csv("data/marketing_analysis.csv", index=False)

print("AnÃ¡lise concluÃ­da! Dados salvos em 'data/marketing_analysis.csv'")
